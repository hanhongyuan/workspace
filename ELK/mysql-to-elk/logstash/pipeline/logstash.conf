input {
    
    file {
    type => "back"
    path => ["/sjfxlogs/back-*.log"]
    exclude => ["/sjfxlogs/back-gateway*.log"]
    codec => multiline {
            pattern => "^BEGIN"
            negate => true
            what => "previous"
  	        }
    }
    
    file {
    type => "gateway"
    path => ["/sjfxlogs/back-gateway*.log"]
    codec => multiline {
            pattern => "^BEGIN"
            negate => true
            what => "previous"
          }
    }
}

filter {
    grok{
        match => {
            "message" => "%{NOTSPACE:microservice}\s*%{TIMESTAMP_ISO8601:time}\s*%{SYSLOG5424SD:thread}\s*%{LOGLEVEL:level}\s*%{NOTSPACE:menthod}\s*'\[%{URIHOST:http_request_ip}\]\[%{NOTSPACE:req_type}\]\[%{NOTSPACE:http_request_id}\]\[%{NOTSPACE:http_request_service}\]\[%{URIPATH:http_request_path}\]\[%{NOTSPACE:http_respons_status}\]\[%{NUMBER:http_request_time:int}\]\s*Body=%{NOTSPACE:http_respons_body}'"
        }
        match => {
            "message" => "%{NOTSPACE:microservice}\s*%{TIMESTAMP_ISO8601:time}\s*%{SYSLOG5424SD:thread}\s*%{LOGLEVEL:level}\s*%{NOTSPACE:menthod}\s*'\[%{URIHOST:http_request_ip}\]\[%{NOTSPACE:req_type}\]\[%{NOTSPACE:http_request_id}\]\[%{NOTSPACE:http_request_service}\]\[%{NOTSPACE:http_menthod}\]\[%{URIPATH:http_request_path}\]\?*%{NOTSPACE:http_request_para}*\s*\|\|\s*Header=%{NOTSPACE:http_request_head}*\s*\|\|\s*Body=%{NOTSPACE:http_request_body}*'"
        }
#        match => {
#            "message" => "%{IPV4:ipv4}\s-\s-\s%{SYSLOG5424SD:time}\s*%{QS:request}\s*%{NUMBER:status}\s*%{NUMBER:size}\s*%{QS:request_url}\s*%{QS:request_bw}"
#        }
        match => {
            "message" => "%{NOTSPACE:microservice}\s*%{TIMESTAMP_ISO8601:time}\s*%{SYSLOG5424SD:thread}\s*%{LOGLEVEL:level}\s*%{NOTSPACE:menthod}\s*%{QUOTEDSTRING:content}"
        }
        
    }
}

output {
	elasticsearch {
		hosts => ["elasticsearch:9200"]
		index => "%{type}-sjfx-new-%{+YY-MM}"
        document_type => "logs"
        codec=>"json"
		user => elastic
		password => E7rHbFbWXxLWY9Bj
	}
}